/**
 * Document: MaxCompiler Tutorial (maxcompiler-tutorial)
 * Chapter: 3      Example: 1      Name: Moving Average Simple
 * MaxFile name: MovingAverageSimple
 * Summary:
 * 	Manager for the three point moving average kernel design.
 *  All IO is between the CPU and the DFE.
*/

package cnn;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationGoal;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemCommandGroup;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.LMemInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface.Direction;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParamArray;

/*
                File Structure

    1 - Global Variables
    	1.1 - Layer Ids
    	1.2 - DFE Config
    	1.3 - Computation
    	1.4 - Data Types
    	1.5 - Max Sizes
    	1.6 - Mem Control

    2 - Constructor

    3 - EngineInterfaces
    	3.1 - LMem
    		3.3.1 - Write
    		3.3.2 - Read
    	3.3 - Propagation
    		3.3.1 - Forward
    		3.3.2 - Backward

    4 - Manager Setup
    	4.1 - Build Params
    	4.2 - LMem Freq
		4.3 - Clock Freq
		4.4 - Kernel
			4.1 - Forward
			4.2 - Backward
		4.5 - DataMovement
			4.5.1 - LMemWrite
			4.5.2 - LMemRead
			4.5.3 - Forward
			4.5.4 - Backward
    5 - Main

*/

public class CNNManager extends CustomManager
{
	// 1 --- Global Variables --- //

		// 1.1 --- Layers IDs--- //

			private static final int Conv = 1;
			private static final int Pool = 2;
			private static final int Fcon = 3;

		// 1.2 --- Variables for DFE Configuration --- //

			private LMemInterface LMem;
			private KernelBlock Kernel;

		// 1.3 --- Variables for Computation --- //

			private final int[] Layers;				// Layer Types
			private final int[][] Dims;				// Layer Dims [0] - Channels , [1] - Size
			private final double[][] Params;			// Layer Params
			private final int[] Parallelism;			// Layer Parallelism. 1 means BurstSize outputs are calculated at once. N means N*BurstSize outputs are calculated at once

			private final int[] BurstMult;				// DFE Burst Multiplier

			private final int[] Padding;				// Amount of LMEM Padding input of each Layer has

			private final int WeightDims;				// Size Weight array will have

		// 1.4 --- Data Types --- //

			private static final CPUTypes DataType = CPUTypes.DOUBLE;

		// 1.5 --- Max Sizes --- //

			private static final int MaxFwdInStreams = 4;	// Max FwdProp Input Streams
			private static final int MaxFwdOutStreams = 3;	// Max FwdProp Output Streams

		// 1.6 --- Mem Control --- //

			private static final int BurstSizeBytes = 192;												// Burst Size in Bytes, implicit for Galava DFE
			private static final int BurstSizeDataType = BurstSizeBytes/DataType.sizeInBytes(); 		// Burst Size in Doubles


	// 2 --- Manager Constructor --- //

		public CNNManager(EngineParameters engineParams,
						  int[] Layers,
						  int[][] Dims, double[][] Params,
						  int[] Parallelism, int[] BurstMult, int[] Padding,
						  int WeightDims)
		{
			super(engineParams);

			// Save Variables

			this.Layers = Layers;
			this.Dims = Dims;
			this.Params = Params;
			this.Parallelism = Parallelism;
			this.BurstMult = BurstMult;
			this.WeightDims = WeightDims;
			this.Padding = Padding;
		}

	// 3 --- Engine Interfaces ---  //

		// 3.1 --- LMem --- //

			// 3.1.1 --- Write --- //

				public EngineInterface InterfaceWrite()
				{
					EngineInterface Ei = new EngineInterface("MemWrite");

					// Params
					InterfaceParam Size  = Ei.addParam("Size", CPUTypes.INT32);			// Mem Size ( must be Padded Already)
					InterfaceParam Start = Ei.addParam("Start", CPUTypes.INT32);		// Where to start Writing

					// Set Streams
					Ei.setStream("DataIn", DataType, Size * DataType.sizeInBytes());										// Data to be Written
					Ei.setLMemLinear("DataInWrite", Start * DataType.sizeInBytes(), Size * DataType.sizeInBytes());			// Write Data

					// This shouldn't have to be here, but ignoreAll isn't working properly
					for(int i = 0; i < WeightDims; ++i)
					{
						Ei.setMem("Kernel", "Weights", i, (double) 0);
					}

					// Ignore Everything that's not used in this Interface
					Ei.ignoreAll(Direction.IN_OUT);

					return Ei;
				}

			// 3.1.2 --- Read --- //

				public EngineInterface InterfaceRead()
				{
					EngineInterface Ei = new EngineInterface("MemRead");

					// Params
					InterfaceParam Size  = Ei.addParam("Size", CPUTypes.INT32);				// Mem Size ( must be Padded Already)
					InterfaceParam Start = Ei.addParam("Start", CPUTypes.INT32);			// Where to start Reading

					// Set Streams
					Ei.setStream("DataOut", DataType, Size * DataType.sizeInBytes());									// Data to be Read
					Ei.setLMemLinear("DataOutRead", Start * DataType.sizeInBytes(), Size * DataType.sizeInBytes());		// Read Data

					// This shouldn't have to be here, but ignoreAll isn't working properly
					for(int i = 0; i < WeightDims; ++i)
					{
						Ei.setMem("Kernel", "Weights", i, (double) 0);
					}

					// Ignore Everything that's not used in this Interface
					Ei.ignoreAll(Direction.IN_OUT);
					return Ei;
				}

	// 3.2 --- Propagation --- //

		// 3.2.1 --- Forward --- //

			public EngineInterface RunForward()
			{
				EngineInterface Ei = new EngineInterface("RunForward");

				// Amount of Ticks Kernel will run for
				Ei.setTicks("Kernel", Integer.MAX_VALUE);

				// --------------------------------------------- //
				// ---------- 		Get Params 		   ----------//
				// --------------------------------------------- //

					// FMem with Weights
					InterfaceParamArray Weights = Ei.addParamArray("Weights", CPUTypes.DOUBLE);
					Ei.setMem("Kernel", "Weights", 0, WeightDims, Weights);

					// First Output Points
					InterfaceParamArray FirstOutputs = Ei.addParamArray("FirstOutputs", CPUTypes.UINT32);

					// Parameter to control where bytes are written in memory
					InterfaceParamArray MemControl = Ei.addParamArray("MemControl", CPUTypes.UINT32);

					// Offset in LMem of where Input Starts
					InterfaceParam InputOffset = Ei.addParam("InputOffset", CPUTypes.UINT32);

				// --------------------------------------------- //
				// ---------- 		LayerSetup 		   ----------//
				// --------------------------------------------- //

					int MemStart = 0, TotalMemSize;
					for(int Layer = 0; Layer < Layers.length; ++Layer)
					{
						// Setup First Output Points

							Ei.setScalar("Kernel", "FirstOutput" + Layer, FirstOutputs[Layer]);

						// Setup Mem Control

							Ei.setScalar("Kernel", "MemControl" + Layer, MemControl[Layer]);

						// Setup Inputs and Outputs for each Layers

							TotalMemSize = (Dims[Layer][0] * Dims[Layer][1] * Dims[Layer][1]);

							switch(Layers[Layer])
							{
								case Conv:
											TotalMemSize += Padding[Layer];
											TotalMemSize *= DataType.sizeInBytes();

											// Input
											Ei.setLMemLinearWrapped("Input" + Layer,
																	InputOffset + MemStart,
																	Ei.addConstant(TotalMemSize),
																	(MemControl[Layer] > 0 ? 1 : 0) * ((2 * TotalMemSize) + (BurstMult[Layer] * BurstSizeBytes)),
																	Ei.addConstant(0));

											MemStart += TotalMemSize;
											break;

								case Pool:
											TotalMemSize += Padding[Layer];
											TotalMemSize *= DataType.sizeInBytes();

											// Input
											Ei.setLMemLinearWrapped("Input" + Layer,
																	InputOffset + MemStart,
																	Ei.addConstant(TotalMemSize),
																	(MemControl[Layer] > 0 ? 1 : 0) * (TotalMemSize + (BurstMult[Layer] * BurstSizeBytes)),
																	Ei.addConstant(0));

											MemStart += TotalMemSize;

											// Mask
											// !!! Still need to fix !!!
											Ei.setLMemLinear("Mask" + Layer,
															InputOffset + MemStart + ( (MemControl[Layer] - 1) * (BurstMult[Layer] * BurstSizeBytes)),
															((MemControl[Layer].eq(Math.ceil(Dims[Layer][0] * Dims[Layer][1] * Dims[Layer][1]/ (float)(BurstMult[Layer]*BurstSizeDataType)))) > 0 ? 1 : 0) * (TotalMemSize));

											MemStart += TotalMemSize;

											break;
								case Fcon:
											if(Dims[Layer][0] == 1)
											{
												TotalMemSize /= Dims[Layer][1];
											}

											TotalMemSize += Padding[Layer];
											TotalMemSize *= DataType.sizeInBytes();

											// Input
											Ei.setLMemLinearWrapped("Input" + Layer,
																	InputOffset + MemStart + (FirstOutputs[Layer] * (BurstMult[Layer] * BurstSizeBytes)),
																	Ei.addConstant((BurstMult[Layer] * BurstSizeBytes)),
																	(MemControl[Layer] > 0 ? 1 : 0) * ((BurstMult[Layer] * BurstSizeBytes) + (BurstMult[Layer] * BurstSizeBytes)),
																	Ei.addConstant(0));

											MemStart += TotalMemSize;

											// Prev Output
											Ei.setLMemLinear("PrevOutput" + Layer,
															InputOffset + MemStart + ( (MemControl[Layer] - 1) * (BurstMult[Layer] * BurstSizeBytes)),
															(MemControl[Layer] > 0 ? 1 : 0) * (BurstMult[Layer] * BurstSizeBytes));
											break;
							}

						// Output
						Ei.setLMemLinear("Output" + Layer,
										InputOffset + MemStart + ( (MemControl[Layer] - 1) * (BurstMult[Layer] * BurstSizeBytes)),
										(MemControl[Layer] > 0 ? 1 : 0) * (BurstMult[Layer] * BurstSizeBytes));
					}

					// Ignore Every Param not used here
					Ei.ignoreAll(Direction.IN_OUT);

				return Ei;
			}

		// 3.2.2 --- Backward --- //

			public EngineInterface RunBackward()
			{
				EngineInterface Ei = new EngineInterface("RunBackward");
				return Ei;

				/*
				// Setup Conv Weights
				InterfaceParamArray ConvWeights = Ei.addParamArray("ConvWeights", CPUTypes.DOUBLE);		// All Weights for all Conv Layers
				Ei.setMem("Kernel", "ConvWeights", 0, ConvWeightsSize, ConvWeights);					// Setup FMem

				// Setup Fcon Weights
				InterfaceParamArray FconWeights = Ei.addParamArray("FconWeights", CPUTypes.DOUBLE);		// All weights for all FCon Layers
				Ei.setMem("Kernel", "FconWeights", 0, FconWeightsSize, FconWeights);					// Setup FMem

				// Enables and Offsets
				InterfaceParamArray Enables = Ei.addParamArray("Enables", CPUTypes.UINT8);				// Which Layers Compute
				InterfaceParamArray Offsets = Ei.addParamArray("Offsets", CPUTypes.UINT32);				// Offsets for Where to write DataOut

				// Set Ticks
				Ei.setTicks("Kernel", TickMax);

				// Ignore All Params not Mentioned
				Ei.ignoreAll(Direction.IN_OUT);

				return Ei;
				*/
			}

	// 4 --- Manager Setup --- //

		// 4.1 --- Build Parameters --- //

			public void SetBuildParameters()
			{
				// Build Configuration
				BuildConfig BConf = getBuildConfig();

				// Building Speed
				BConf.setBuildEffort(Effort.HIGH);
				BConf.setMPPRCostTableSearchRange(1, 4);
				BConf.setMPPRParallelism(64);

				// Build Objectives
				BConf.setOptimizationGoal(OptimizationGoal.SPEED);
			}

		// 4.2 --- LMemFreq --- //

			public void SetLMemFrequency()
			{
				// set LMem Frequency
				/*LMemConfig LMemConf = makeLMemConfig();
				LMemConf.setArbitrationMode(ArbitrationMode.DYNAMIC);
				LMemInterface LMem = addLMemInterface(LMemConf);*/
				this.LMem = addLMemInterface();
			}

		// 4.3 --- Clock Frequency --- //

			public void SetClockFrequency(int freq)
			{
				this.Kernel.setClock(generateStreamClock("Clk", freq));
			}

		// 4.4 --- Kernel --- //

			// 4.4.1 --- Forward --- //

			public void SetupForwardKernel()
			{
				// Setup Kernel
				this.Kernel = addKernel(new ForwardPropKernel(makeKernelParameters("Kernel"),
													Layers,
													Dims, Params,
													Parallelism, Padding, BurstMult,
													WeightDims));

				// Setup Streams
				SetupFPropStreams();
			}

			// 4.4.2 --- Backward --- //

			public void SetupBackwardKernel()
			{
				// Setup Kernel
				this.Kernel = addKernel(new BackwardPropKernel(makeKernelParameters("Kernel"),
													Layers,
													Dims, Params,
													Parallelism, Padding, BurstMult,
													WeightDims));

				// Setup Streams
				SetupBPropStreams();
			}

		// 4.5 --- Data Movement --- //

			// 4.5.1 --- Write Streams --- //

				public void SetupLMemWrite()
				{
					DFELink cpu2lmem = LMem.addStreamToLMem("DataInWrite", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
					DFELink fromcpu = addStreamFromCPU("DataIn");
					cpu2lmem <== fromcpu;

				}

			// 4.5.2 --- Read Streams --- //

				public void SetupLMemRead()
				{
					DFELink lmem2cpu = LMem.addStreamFromLMem("DataOutRead", LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);
					DFELink tocpu = addStreamToCPU("DataOut");
					tocpu <== lmem2cpu;
				}

			// 4.5.3 --- Forward Prop Streams --- //

				public void SetupFPropStreams()
				{
					// Link Kernel Inputs and Outputs to LMem

						for(int Layer = 0; Layer < Layers.length; ++Layer)
						{
							// Connect Input

								DFELink Input = LMem.addStreamFromLMem("Input" + Layer, LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

								this.Kernel.getInput("Input" + Layer) <== Input;

							// Connect Output

								DFELink Output = LMem.addStreamToLMem("Output" + Layer, LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

								Output <== this.Kernel.getOutput("Output" + Layer);

							// Connect Extra Streams if necessary

								if(Layers[Layer] == Pool)
								{
									Output = LMem.addStreamToLMem("Mask" + Layer, LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

									Output <== this.Kernel.getOutput("Mask" + Layer);
								}

								if(Layers[Layer] == Fcon)
								{
									Input = LMem.addStreamFromLMem("PrevOutput" + Layer, LMemCommandGroup.MemoryAccessPattern.LINEAR_1D);

									this.Kernel.getInput("PrevOutput" + Layer) <== Input;
								}
						}
				}

			// 4.5.4 --- BProp Streams --- //

				public void SetupBPropStreams()
				{

				}
}